{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "AssignInstanceRole": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "InstanceRoleProfile"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseKeyPair": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "KeyPairName"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Description": "Deploy CentOS 7 Linux EC2 to build Amazon utility source RPMs",
    "Mappings": {},
    "Metadata": {},
    "Outputs": {},
    "Parameters": {
        "AmiId": {
            "Description": "ID of the AMI to launch",
            "Type": "AWS::EC2::Image::Id"
        },
        "InstanceRoleName": {
            "Default": "",
            "Description": "(Optional) IAM instance role to apply to the instance",
            "Type": "String"
        },
        "InstanceRoleProfile": {
            "Default": "",
            "Description": "(Optional) IAM instance-role profile to apply to the instance(s)",
            "Type": "String"
        },
        "InstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.large",
                "t3.micro",
                "t3.small",
                "t3.large"
            ],
            "Default": "t3.micro",
            "Description": "Amazon EC2 instance type",
            "Type": "String"
        },
        "KeyPairName": {
            "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type": "String"
        },
        "SecurityGroupIds": {
            "Description": "List of security groups to apply to the instance",
            "Type": "List<AWS::EC2::SecurityGroup::Id>"
        },
        "StagingBucket": {
            "AllowedPattern": "^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]*$|^$",
            "Description": "S3 Bucket to host backups of GitLab config- and app-data",
            "Type": "String"
        },
        "SubnetId": {
            "Description": "ID of the subnet to assign to the instance",
            "Type": "AWS::EC2::Subnet::Id"
        }
    },
    "Resources": {
        "RpmBuilder": {
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": true,
                            "VolumeSize": "30",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Fn::If": [
                        "AssignInstanceRole",
                        {
                            "Ref": "InstanceRoleProfile"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "ImageId": {
                    "Ref": "AmiId"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Fn::If": [
                        "UseKeyPair",
                        {
                            "Ref": "KeyPairName"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": false,
                        "DeviceIndex": "0",
                        "GroupSet": {
                            "Ref": "SecurityGroupIds"
                        },
                        "SubnetId": {
                            "Ref": "SubnetId"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "Content-Type: multipart/mixed; boundary=\"===============3585321300151562773==\"\n",
                                "MIME-Version: 1.0\n",
                                "\n",
                                "--===============3585321300151562773==\n",
                                "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                                "MIME-Version: 1.0\n",
                                "Content-Transfer-Encoding: 7bit\n",
                                "Content-Disposition: attachment; filename=\"cloud.cfg\"\n",
                                "\n",
                                "#cloud-config\n",
                                "\n",
                                "growpart:\n",
                                "  mode: auto\n",
                                "  devices: [ '/dev/xvda', '/dev/xvda2', '/dev/nvme0n1', '/dev/nvme0n1p1', '/dev/nvme0n1p2' ]\n",
                                "  ignore_growroot_disabled: false\n",
                                "\n",
                                "--===============3585321300151562773==\n",
                                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                                "MIME-Version: 1.0\n",
                                "Content-Transfer-Encoding: 7bit\n",
                                "Content-Disposition: attachment; filename=\"script.sh\"\n",
                                "\n",
                                "#!/bin/bash -xe\n\n",
                                "# Set up some misc. vars\n",
                                "export PYTHON3=python36\n",
                                "\n",
                                "# Setup terminal support for UTF-8\n",
                                "export LC_ALL=en_US.UTF-8\n",
                                "export LANG=en_US.UTF-8\n",
                                "\n",
                                "# Export AWS ENVs\n",
                                "test -r /etc/aws/models/endpoints.json && export AWS_DATA_PATH=/etc/aws/models || true\n",
                                "export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                                "export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                                "export AWS_DEFAULT_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n\n",
                                "# Ensure everything is up to date\n",
                                "yum update -y\n",
                                "\n",
                                "# Install developer tools and other necessary RPMs\n",
                                "yum install -y @development\n",
                                "yum install -y --enablerepo=epel ${PYTHON3} ${PYTHON3}-dateutil golang\n",
                                "yum install -y acpid rpmdevtools rpmlint python2-devel pytest dos2unix\n",
                                "\n",
                                "# Try to build things with Python3\n",
                                "python3 -m ensurepip --upgrade --default-pip\n",
                                "pip install --upgrade pip setuptools\n",
                                "pip install --upgrade boto3\n",
                                "\n",
                                "# Install developer tools and other necessary RPMs\n",
                                "# Download all Amazon utility source-RPMs\n",
                                "install -Ddm 000755 /var/tmp/SRPMs-\"$( date \"+%Y%m%d\" )\" \n",
                                "cd /var/tmp/SRPMs-\"$( date \"+%Y%m%d\" )\" \n",
                                "aws s3 sync s3://",
                                {
                                    "Ref": "StagingBucket"
                                },
                                "/RPMbuild/SRPMs-\"$( date \"+%Y%m%d\" )\"/ ",
                                "/var/tmp/SRPMs-\"$( date \"+%Y%m%d\" )\"/ \n",
                                "\n",
                                "# Set up buildroot\n",
                                "rpmdev-setuptree\n",
                                "mv /rpmbuild . \n",
                                "cd rpmbuild/SOURCES/\n",
                                "for SRPM in ../../*.src.rpm; do rpm2cpio $SRPM | cpio -idv; done\n",
                                "mv *.spec ../SPECS\n",
                                "\n",
                                "# Build binary RPMs\n",
                                "cd ..\n",
                                "for SPEC in SPECS/*.spec\n",
                                "do\n",
                                "   rpmbuild --define \"_topdir $( pwd )\" -ba \"${SPEC}\" && ",
                                "touch \"${SPEC}.built\"\n",
                                "done\n",
                                "\n",
                                "# Stage unsigned binary RPMs to S3\n",
                                "aws s3 sync RPMS/ s3://",
                                {
                                    "Ref": "StagingBucket"
                                },
                                "/RPMbuild/UnsignedRPMs-$( date \"+%Y%m%d\" )/\n",
                                "\n",
                                "\n",
                                "--===============3585321300151562773==--"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        }
    }
}
